::css
  body {
    max-width: 44em;
    margin: auto;
    margin-bottom: 40em;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
    padding: 12px;
    background-color: #fff;
    color: #000;
  }
  dt {
    font-weight: bold;
  }
  pre {
    padding-left: 2em;
    padding-right: 1em;
    padding-top: 1ex;
    padding-bottom: 1ex;
    background-color: #fdf6e3;
    border-radius: 16px;
    font-family: ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;
    font-size: 1rem;
    overflow-x: auto;
    line-height: 125%;
  }
  a {
    color: rgb(0, 0, 238);
  }
  tt {
    background-color: #eee;
    padding: 2px;
  }
  pre .enum {
    font-weight: bold;
  }
  pre .keyword {
    color: #049407;
  }
  pre .comment {
    color: #000;
    font-style: italic;
  }
  pre .literal {
    color: #2aa198;
  }
  pre .type {
    color: #de6e00;
  }
  pre .macro {
    color: #66a;
  }
  pre .func {
    color: #213dde;
  }
  pre .preproc {
    color: #777;
  }
  .quoted {
    margin-left: 2em;
    border-left: 2px solid grey;
    padding-left: 8px;
  }
  pre .h {
    font-weight: bold;
  }
  pre .param {
    color: #6a6;
  }
  /*endcss*/
[Home | home]

::js
  let wrapped = ctx.select_nodes({attributes:['wrapped']});
  for(let w of wrapped){
    w.insert_child(0, '<pre>');
    w.add_child('</pre>');
  }
  //endjs
::toc
Doctests in C::title
<i>[David Priver], July 30th, 2022</i>

::raw
  <article>

[Doctests] are a technique of testing the examples embedded in documentation.
They were first created for the Python language in 1999, but have since spread
to other languages like Rust.

Embedding examples in documentation is very useful as it can immediately clarify
usage of an API or the meaning of unclear terms. However, they can rot as the
API changes, which can be worse than having nothing at all. What are we to do?

Well, as usual in C when you have a problem that can't be solved directly in the
language itself, you reach for the preprocessor (this usage isn't that crazy, I
promise!). Just include the examples in the doc, but guard them with an
<tt>#ifdef</tt>. You can then write a test program that <tt>#includes</tt> the
documentation file, but with that macro defined so the examples are actual code.
Then, run the tests!

An example:

::raw @wrapped #import
  some_api.h.html
And the test code:

::raw @wrapped #import
  test_some_api_docs.c.html
This isn't as nice as automatically extracting the examples like doctest can do,
but when integrated into your test suite you will no longer have regressions in
your documentation's examples. Additionally, it is nice to have examples right
next to the definitions in the header anyway as that is what you'll jump to when
you use your editor's GoToDefinition functionality. Finally, it is easier to
write the examples as the examples are written as actual code instead of
embedded in comments (so your editor and other tools understand it as code).

You do need a documentation generator which understands that it needs to include
these <tt>#ifdef</tt>'d example blocks. I'm working on such a tool based on
libclang, but it is not ready for release yet.

::raw
  </article>
Copyright::md
  All code in this article is released into the public domain.

::links
  home = https://www.davidpriver.com
  David Priver = mailto:david@davidpriver.com
  doctests = https://docs.python.org/3/library/doctest.html
  doctest = https://docs.python.org/3/library/doctest.html

