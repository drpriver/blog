::css #import
  ../c.css
::css
  h1, #runvarsargs {
    font-family: ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;
  }
  /*endcss*/
[Home | home]
::toc
run(**vars(args))::title #noid #hide
::raw
  <article>
run(**vars(args))::md
  <i>[David Priver], July 27th, 2022</i>

  Python has the pretty decent argument parsing module <tt>[argparse]</tt> as part
  of the standard library. It offers a procedural API for building up a parser
  for a program's command line arguments. After calling <tt>parse_args</tt>, you
  get back a simple namespace object that contains the values as defined by your
  parser (which I'll refer to as <tt>args</tt>.)

  ::pre .python
    # some_script.py
    import argparse

    def main() -> None:
        parser = argparse.ArgumentParser()
        parser.add_argument('N', type=int)
        parser.add_argument('pid', type=int)
        parser.add_argument('--with-candles', action='store_true')

        args = parser.parse_args()
        ...

    if __name__ == '__main__':
        main()
  There's just one problem: the only way to tell what is in this returned
  <tt>args</tt> is by reading the code that builds up the parser.

  What I've found to be an effective way to help with that problem is to
  immediately grab the attributes off of the <tt>args</tt> and pass them to a
  function that actually does the work (normally named <tt>run</tt>). You want
  to spend as little time as possible with this dynamic, unstructured
  <tt>args</tt>.

  ::pre .python
    # some_script.py
    import argparse

    def main() -> None:
        parser = argparse.ArgumentParser()
        parser.add_argument('N', type=int)
        parser.add_argument('pid', type=int)
        parser.add_argument('--with-candles', action='store_true')

        args = parser.parse_args()
        run(args.N, args.pid, args.with_candles)


    def run(N:int, pid:int, with_candles:bool=False) -> None:
        ...

    if __name__ == '__main__':
        main()
  Having a separate <tt>run</tt> function is nice anyway, as it means you can
  write scripts that import your script and just call the <tt>run</tt> function:

  ::pre .python
    # myscript.py
    import some_script
    import another_script

    some_script.run(1, 2, with_candles=True)
    another_script.run('big', 1, 'hello.txt')
  However, this <tt>run</tt> function poses its own problem. It's tedious to
  grab all of the attributes off of <tt>args</tt>, which tempts you to the dark
  side of just passing the <tt>args</tt> object around in your application,
  making it very hard to understand what's going on.

  Luckily, there is a relatively obscure builtin function in python called
  <tt>[vars]</tt>. <tt>vars</tt> (when given an argument) basically grabs all of
  the attributes off of an object and puts them into a <tt>dict</tt>. Coupling
  that with python's convenient <tt>**</tt> for dictionary unpacking, you are
  saved the trouble of manually peeling the attributes off yourself. Thus the
  title of this article: you use the incantation <tt>run(**vars(args))</tt>
  immediately after parsing command-line arguments.

  ::pre .python
    # some_script.py
    import argparse

    def main() -> None:
        parser = argparse.ArgumentParser()
        parser.add_argument('N', type=int)
        parser.add_argument('pid', type=int)
        parser.add_argument('--with-candles', action='store_true')

        args = parser.parse_args()
        run(**vars(args)) # Here it is.

    def run(N:int, pid:int, with_candles:bool=False) -> None:
        ...

    if __name__ == '__main__':
        main()
  Relatively simple pattern, but I've found it to be useful. I'm sure there are
  argument parsing libraries that do nicer things, but with this pattern you can
  stick to the standard library which lessens the dependency problem.

::raw
  </article>

Copyright::md
  All code in this article is released into the public domain.

::links
  vars = https://docs.python.org/3/library/functions.html#vars
  argparse = https://docs.python.org/3/library/argparse.html
  home = https://www.davidpriver.com
  David Priver = mailto:david@davidpriver.com

::import
  highlight-python.dnd
